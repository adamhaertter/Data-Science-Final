---
title: "Data Science 1: Final Writeup"
author: "Adam Haertter & Brennan Mulligan"
format: pdf
---

# Introduction

Our topic was A Statistical Analysis on How Genre/Platform Affects the Video Game Market. We looked into a list from VGChartz.com of every video game released and how the genre and platform affects the amount of sales. Certain developers perform differently with the various genres and platforms. These results will allow people to see what genres appear to be successful in the industry as a whole or depending on the publisher/platform that is supported.

## Topic Introduction

Video games, like other media such as shows, movies, and books, have a variety of genres. These genres are partially related to their stories, but have more to do with the way that the game is played. Certain genres may perform better or less than others because of the audience's interest in them. Also, video games release on certain platforms or consoles. These systems may be owned by only a portion of the audience. Having a game on a higher amount of platforms may increase sales numbers, but also increase the time and effort needed to be able to port the game to them. Publishers must find their balance to see what platform they wish to release their games on. Some publishers also have created a platform for games to be played on so it is reasonable that they will release games exclusively on that platform so to increase the demand for that console.

## Relevance / Importance

Publishers may be influenced by this information to decide on what genres to develop games in to increase their profits. Specific publishers that we cover may also find it interesting to see if the genre they make the most games for is also the one that makes the most money by game/franchise. This would reveal flaws in the genres or platforms they are currently developing for and how they may be missing out on improved sales.

# Load Packages

The packages we use in this project are kept to a minimum. 
Because we are obtaining our data on our own, we don't need to install or load it thorugh an R package at all.

* tidyverse is used to bring in a lot of different packages that we use for our data, most specifically dplyr, readr, and ggplot, all of which are used heavily here.
* magrittr is specifically defined because of our use of the double pipe operator `%<>%`. Bugs arose attempting to use this without specifically librarying magrittr, which is why it is separately defined from tidyverse.
* here is used for file and directory control. This is especially important when we are saving plots to files as well as saving and loading data files.

```{r lib}
#| message: false

library("tidyverse")
library("magrittr")
library("here")
```

# Our Data

## Origin of Data

Our data comes from VGChartz.com, which is a large database of video game data. 
At the time of data collection, their database contained 62,710 different entries of publicly-available data for different video game releases. 
Something that is important to note is that VGChartz stores data for games split up by consoles, but included in this data is overall data for individual game series and multi-platform releases. 
For example, the website has a separate section for Pokemon as a series and each individual game in the series. 
Therefore, in the interest of not duplicating data and honestly representing all sales data, we often drop the `Series` and `All` data to provide a better representation of our data.

## Obtaining the Data

In order to obtain data from VGChartz, we opted to query the webapge at https://www.vgchartz.com/games/games.php.
The table on this page dynamically renders using JavaScript to display the queried information. 
We opted for this approach over using their API keys because of the simplicity of getting all the relevant data at once rather than making multiple API calls.

To do this, we had to create a Python scraper because the table's data wasn't part of the native HTML.
Therefore, we couldn't use R to scrape the data easily like we had learned in class.
Our Python scraper uses selenium, BeautifulSoup, and ChromeDriver, and needs all of those installed in order to work locally.
Below is an excerpt from our Python scraper, which defines the full url query we used to get all information and the genres we add to it to get full coverage.

```{Python}
url1 = "https://www.vgchartz.com/games/games.php?name=&keyword=&console=&region=All&developer=&publisher=&goty_year=&genre="
url2 = "&boxart=Both&banner=Both&ownership=Both&showmultiplat=No&results=10000&order=Sales&showtotalsales=1&showpublisher=1&showvgchartzscore=0&showvgchartzscore=1&shownasales=1&showdeveloper=1&showcriticscore=1&showpalsales=1&showreleasedate=1&showuserscore=1&showjapansales=1&showlastupdate=1&showothersales=1&showshipped=1"

genres = ["Action", "Action-Adventure", "Adventure", "Board Game", "Education", 
          "Fighting", "Misc", "MMO", "Music", "Party", "Platform", "Puzzle", 
          "Racing", "Role-Playing", "Sandbox", "Shooter", "Simulation", "Sports", 
          "Strategy", "Visual Novel"]
```

Through a loop, we scrape table queries for each of the supported genres listed on VGChartz.
Then, each gets saved to its own .csv file.
We iterate for each genre because this is the only relevant column that VGChartz stores but doesn't render to the main table we use.
As a result, saving each genre to its own .csv allows us to keep this information and apply it later.

```{Python}
for genre in genres:
    # Removed some code here, see source file
  
    table_html = table_element.get_attribute('outerHTML')
    soup = BeautifulSoup(table_html, 'html.parser')
    rows = soup.find_all('tr')

    print("Building data array from page...")

    data = []
    for i, row in enumerate(rows):
        if(i < 3):
            cols = row.find_all('th')
        else:
            cols = row.find_all('td')
        row_data = []
        for col in cols:
            if col.find('img') is not None:
                row_data.append(col.find('img').get('alt'))
            else:
                row_data.append(col.text.strip())
        if(i == 2):            
            row_data.insert(1, "Box Art")
            print(row_data)
        data.append(row_data)
        
    # Then, write to csv
```

## Tidying the Data

To clean the data, the first thing we wanted to do was combine all of our .csv files for each genre into one master sheet that we could use for everything.
This would ultimately replicate the massive database of information that was VGChartz.
Each genre .csv would be loaded from its directory and have its filename be appended as a separate column representing the genre.
Because we saved each individual genre to its own file, this was very simple.

```{r}
load_add_genre <- function(genre) {
  path <- paste("data/raw/", genre %>% str_replace_all(" ", "_"), ".csv", sep = "")
  readfile <- read.csv(path, skip = 2) %>%
    mutate("Genre" = genre) %>%
    subset(select = -`Box.Art`)
  readfile
}
```

We also removed the column for the Box Art, which was included as part of the original VGChartz rendered table. 
Because we ran our scraper in headless mode, we didn't save any images or urls to our .csv files, so this column is useless to us now. 
Lastly, we ran through each of our genres and appended the entire contents of that .csv to the master sheet.

```{r}
master <- tibble()
for(genre in genres) {
  raw_list <- genre %>% load_add_genre()
  master %<>% bind_rows(raw_list)
}
```

On VGChartz, some games had full reviews linked in the output of the table we scraped.
If that was the case, the words "Read the review" where attached on a newline under the game name.
Since we just want the game name, we removed that text wherever it appeared.
We also replaced the site's string "N/A" with actual `NA` values in R.
All numbers in our data were in millions, which was represented with an 'm' after the number. We stripped these out and converted all appropriate columns to numeric values.

```{r}
# Remove "Read the review" from Title
master$Game %<>% str_replace_all("    Read the review", "")
# Replace "N/A" with actual NA val
master[2:17] %<>% mutate_all(~na_if(., "N/A"))
# Strip m from counts, convert to ints, put factor in title
master[9:14] %<>% mutate_all(~str_replace_all(., "m", "") %>% as.numeric())
```

VGChartz also included separate data called Total.Shipped and Total.Sales.
* Total.Sales are the actual reported numbers of copies sold for each game.
* Total.Shipped are how many copies of the game were shipped to retailers.

Companies may report either, both, or neither, but after some testing, we found both columns to be mutally exclusive. That is to say, if there was a value for Total.Sales, there was never a corresponding value for Total.Shipped. Because they were mutally exclusive and represent very similar metrics, we combined them into a single column.
```{r}
# Combine Total.Sales and Total.Shipped into one column - mutually exclusive
master$Total.Units <- ifelse(!is.na(master$Total.Shipped) & !is.na(master$Total.Sales), 
                             NA, 
                             ifelse(!is.na(master$Total.Shipped), 
                                    master$Total.Shipped, 
                                    master$Total.Sales))
# Rename Total.Units (combined) to Total.Sales for consistency
colnames(master)[colnames(master)=="Total.Units"] <- "Total.Sales"
```

The last part of our data cleanup came from looking at the Publisher names, which was a big area we wanted to focus on.
Initially, we had well over a thousand publishers (~1200), but some were represented in multiple ways. 
Companies could be represented by multiple names, including some abbreviations or even misspellings.
Because we wanted to use Publisher data as one of our core facets, we compiled a list of all unique publisher names in our dataset and looked through to see which needed combined.

```{r}
publishers_by_sales <- master[, c(3,6,8)]  %>% drop_na() %>%
  group_by(Publisher) %>% 
  summarize("Sum.Sales" = sum(Total.Sales)) %>% 
  arrange(desc(Sum.Sales))

publishers_by_sales
```

This required some time for outside research, as we also wanted to include companies that had merged into one publishing entity or those companies which have acquired all assets of another company.
One example here in the preview is "Electronic Arts" with 1758.69 cumulative sales and "EA Sports" with 1039.99 cumulative sales. These are the same company, so we knew we had to combine them.
In the interest of keeping the original data available, we made a new column called Publisher.Simple to store this new data.

```{r}
# Make a column for common publisher names
master$Publisher.Simple <- master$Publisher %>% clean_names()
```

The function `clean_names()` is exceptionally long, as it reduces the size of Publisher names by nearly 200 titles.
Simply, the function repeatedly calls `str_replace_all()` to modify the duplicate companies as they appear in the data. 
Some cleanup is also done to ensure these replace calls do not affect each other.
Below is an excerpt from the function, but representing the entire function in this write-up would be taking up unnecessary space.
If you are interested in seeing the full function, be sure to see [parse_vgcharts.R](scripts/parse_vgchartz.R).

```{r}
clean_names <- function(names) {
  names %>% str_replace_all("1C Company", "1C Maddox Games") %>%
    # 2K Games subsidiaries
    str_replace_all("2K Play", "2K Games") %>%
    str_replace_all("2K Sports", "2K Games") %>%
    str_replace_all("989 Sports", "989 Studios") %>%
    # Bandai Namco merger
    str_replace_all("Bandai Namco Entertainment", "Bandai Namco") %>%
    str_replace_all("Bandai Namco Games", "Bandai Namco") %>%
    str_replace_all("Bandai Visual", "Bandai Namco") %>%
    str_replace_all("Namco Bandai Games", "Bandai Namco") %>%
    str_replace_all("Namco Bandai", "Bandai Namco") %>%
    str_replace_all("Namco Networks America Inc.", "Bandai Namco") %>%
    str_replace_all("Namco", "Bandai Namco") %>%
    str_replace_all("Bandai", "Bandai Namco") %>%
    str_replace_all("Bandai Bandai Namco", "Bandai Namco") %>% # Cleanup
    str_replace_all("Bandai Namco Namco", "Bandai Namco") %>%
    str_replace_all("Bandai Namco Bandai Namco", "Bandai Namco") %>%
    # More solos
    str_replace_all("CD Projekt Red Studio", "CD Projekt Red") %>%
    str_replace_all("Capcom Entertainment", "Capcom") %>%
    str_replace_all("Coffee Stain Publishing", "Coffee Stain Studios") %>%
    str_replace_all("D3Publisher", "D3 Publisher") #%>% 
    # Many more companies...   
}
```

Finally, the last modification to our dataset is to rearrange the column names in a logical order.
The master sheet is then saved back to a .csv file and .rda file so we can reload it at any time.
```{r}
# Reorder columns logically
master <-master[, c("Pos", "Game", "Console", "Genre", "Publisher.Simple", "Publisher", "Developer", "Total.Sales", "NA.Sales", "PAL.Sales", "Japan.Sales", "Other.Sales", "Release.Year", "Release.Month", "Release.Day", "VGChartz.Score", "Critic.Score", "User.Score", "Updated.Year", "Updated.Month", "Updated.Day")] 

write.csv(master, file = "data/wrangled/vgchartz_full.csv")
save(master, file = here("data", "wrangled", "wrangled_data.rda"))
```

## Loading the Data

To reload the data into the dataset, this call serves to replace the master dataframe back into the environment.

```{r}
load(file = here("data", "wrangled", "wrangled_data.rda"))
```

Additionally, most of our data wrangling has been abstracted into their own scripts, so running this call reruns them if master ever needs modified for everyone.
This retraces most of the steps shown above in this section of the writeup.

```{r}
source("scripts/wrangle_data.R")
```

See [wrangle_data.R](scripts/wrangle_data.R).

# Defining Functions
We realized that the "most popular" developed genre was Miscellaneous according to VGChartz. This does not give us a good indication of what is actually most popular because that's not a genuine Genre. We decided to filter out any times that Misc was used in our calculations whenever we were presenting mainly about genre. We would keep Misc later once we were only looking into sales.
```{r}
master_without_misc <- master %>% filter(Genre != "Misc")
```

We also wanted to set up consistent color scales for our genres and consoles to improve the readability and understanding of our graphs.
```{r}
colorscale <- c("Action" = "red",
                  "Action-Adventure" = "orange",
                  "Adventure" = "green",
                  "Board Game" = "brown",
                  "Education" = "yellow",
                  "Fighting" = "purple",
                  "Misc" = "gray",
                  "MMO" = "blue",
                  "Music" = "lightblue",
                  "Party" = "pink",
                  "Platform" = "turquoise",
                  "Puzzle" = "lavender",
                  "Racing" = "darkgreen",
                  "Role-Playing" = "gold",
                  "Sandbox" = "beige",
                  "Shooter" = "black",
                  "Simulation" = "lightgreen",
                  "Sports" = "navy",
                  "Strategy" = "olivedrab",
                  "Visual Novel" = "magenta")

console_colorscale <- c("PC" = "darkslategray",
                    "XB" = "green",
                    "X360" = "olivedrab2",
                    "XOne" = "chartreuse3",
                    "XS" = "darkgreen",
                    "PS2" = "blue",
                    "PS3" = "dodgerblue",
                    "PS4" = "navy",
                    "PS5" = "purple4",
                    "PSP" = "purple", 
                    "DS" = "black",
                    "3DS" = "brown",
                    "Wii" = "cyan",
                    "WiiU" = "cyan3",
                    "NS" = "red",
                    "And" = "yellow",
                    "Mobile" = "orange")
```

Our Publisher By Genre Function allowed us to gather the sales of each genre developed by a single publisher. We would plot this information to see what genres were the highest selling for a certain publisher.
```{r}
publisher_by_genre <- function(publisher) {
  master_without_misc[, c(3,4,5,8)] %>%
  filter(Console != "Series" & Console != "All" & Publisher.Simple == publisher & Genre != "Misc") %>%
  drop_na() %>%
  group_by(Genre) %>% summarize("Sum.Sales" = sum(Total.Sales)) %>% arrange(desc(Sum.Sales))
}
```

The Sales By Genre Plot takes in a publisher and, using the previous function, plots the sales of each genre that the publisher develops from high to low.
```{r}
sales_by_genre_plot <- function(publisher) {
  ggplot(publisher_by_genre(publisher), aes(x = reorder(Genre, -Sum.Sales), y = Sum.Sales, fill = Genre)) + geom_bar(stat = "identity", position = position_dodge()) + theme(plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) + labs(x = "Genre", y = "Sales", title = paste(publisher, "Sales By Genre")) + scale_fill_manual(values = colorscale, guide = "none")
}
```

The Save Genre Plot allowed us to save the plot that was created from the previous functions as an image to be used for our presentation.
```{r}
save_genre_plot <- function(publisher) {
  savable <- sales_by_genre_plot(publisher)
  publisher %<>% tolower() %>% str_replace_all(" ", "_")
  save(savable, file = here("plots", "genre_v_publisher", paste(publisher, "_sales_by_genre.rda", sep = "")))
  ggsave(here("plots", "genre_v_publisher", paste(publisher, "_sales_by_genre.png", sep = "")))
  savable
}
```

The Console Performance by Publisher function is similar to the Publisher by Genre function. It takes in a publisher's name and gets the total sales made on each platform from that publisher.
```{r}
console_performances_by_publisher <- function(publisher) {
  master[, c(3,4,5,8)] %>%
  filter(Console %in% c("PC", "XB", "PS2", "DS", "3DS", "Wii", "NS", "PS3", "PS4", "PS5", "X360", "XOne", "XS", "PSP", "WiiU", "And", "Mobile") & Publisher.Simple == publisher) %>%
  drop_na() %>%
  group_by(Console) %>%
    summarize(Console.Sales = sum(Total.Sales))
}
```

The Publisher Performances Consoles Plot is similar to the Sales By Genre Plot as it plots out the results of the previous function. This allows the audience to see how many sales were made for each platform by a specific publisher.
```{r}
pub_performances_consoles_plot <- function(publisher) {
  ggplot(console_performances_by_publisher(publisher), aes(x = reorder(Console, -Console.Sales), y = Console.Sales, fill = Console)) + geom_bar(stat = "identity", position = position_dodge()) + theme(plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) + labs(x = "Console", y = "Sales", title = paste(publisher, " Sales By Console")) + scale_fill_discrete(guide="none") + scale_fill_manual(values = console_colorscale, guide = "none")
}
```

The Save Publisher Performance allows us to save pngs of the plots from the previous function to be used in the presentation.
```{r}
save_pub_performance <- function(publisher) {
  pub_performances_consoles_plot(publisher)
  publisher %<>% tolower() %>% str_replace_all(" ", "_")
  save(savable, file = here("plots", "console_v_sales", paste(publisher, "_sales_by_console.rda", sep = "")))
  ggsave(here("plots", "console_v_sales", paste(publisher, "_sales_by_console.png", sep = "")))
  savable
}
```

Console Releases By Publisher function ignores sales numbers by taking in a publisher and solely getting the amount of game releases on each platform that they developed.
```{r}
console_releases_by_publisher <- function(publisher) {
  master[, c(3,4,5,8)] %>%
  filter(Console %in% c("PC", "XB", "PS2", "DS", "3DS", "Wii", "NS", "PS3", "PS4", "PS5", "X360", "XOne", "XS", "PSP", "WiiU", "And", "Mobile") & Publisher.Simple == publisher) %>%
  drop_na() %>%
  group_by(Console) %>%
    summarize(Releases = n())
}
```

The Publisher Supported Consoles Plot function takes the results from the previous function and plots them. This allows us to visually see how many game releases a publisher developed for certain platforms.
```{r}
pub_supported_consoles_plot <- function(publisher) {
  ggplot(console_releases_by_publisher(publisher), aes(x = reorder(Console, -Releases), y = Releases, fill = Console)) + geom_bar(stat = "identity", position = position_dodge()) + theme(plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) + labs(x = "Console", y = "Releases", title = paste(publisher, " Releases By Console")) + scale_fill_discrete(guide="none") + scale_fill_manual(values = console_colorscale, guide = "none")
}
```

The Save Publisher Supported function allows us to save the plot from the previous function into a png for us to use in the presentation.
```{r}
save_pub_supported <- function(publisher){
  pub_supported_consoles_plot(publisher)
  publisher %<>% tolower() %>% str_replace_all(" ", "_")
  save(savable, file = here("plots", "console_v_release", paste(publisher, "_releases_by_console.rda", sep = "")))
  ggsave(here("plots", "console_v_release", paste(publisher, "_releases_by_console.png", sep = "")))
  savable
}
```

# Analysis
Most of our plots were made through the function calls above, but some of them did not need functions as they were based on the overall industry and not just publisher names.

For example, we used this plot to visualize the most popular genres based on how many games were developed for each. This will be important in comparing to other data to see if publishers are developing the genres making the most money.
```{r}
popular_genres_data <- as.data.frame(sort(table(master_without_misc$Genre)), decreasing = TRUE)

ggplot(popular_genres_data, aes(x = reorder(Var1, -Freq), y = Freq, fill = Var1)) +
  geom_bar(stat = "identity") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  labs(x = "Genre", y = "Games Published", title = "Most Popular Genres") + 
  scale_fill_manual(values = colorscale, guide = "none")
```

Action appears to be the most developed genre out of any other genre. It is important to note just how many of the more supported genres are faster paced and exciting experiences compared to the slower paced experiences of education games or visual novels.

With Genres By Sales, we calculated what was the best selling genre. This allows the audience to see what genres are making the most money and comparing it to other graphs to see if if publishers should steer towards what is making more profit.
```{r}
genres_by_sales <- master_without_misc[, c(3,4,5,8)]  %>% drop_na() %>%
  group_by(Genre) %>% summarize("Sum.Sales" = sum(Total.Sales)) %>% arrange(desc(Sum.Sales))

ggplot(genres_by_sales, aes(x = reorder(Genre, -Sum.Sales), y = Sum.Sales, fill = Genre)) +
  geom_bar(stat = "identity") + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  labs(x = "Genre", y = "Sales", title = "Highest Selling Genres") +
  scale_fill_manual(values = colorscale, guide = "none")
```

As you can see, Action-Adventure is the Highest Selling Genre. Most of the genres generally follow a similar trend to the most developed. VGChartz seems to make a distinction between Action-Adventure, Action, and Adventure Genres. Generally, despite Action-Adventure being labelled differently from the Action genre in the previous graph, it is safe to assume that both Action and Adventure games are typically most profitable.

Now let's call the previous functions for the Top 5 Publishers in Game Sales
```{r}
sales_by_genre_plot("Nintendo")
sales_by_genre_plot("Electronic Arts")
sales_by_genre_plot("Activision")
sales_by_genre_plot("Sony")
sales_by_genre_plot("Ubisoft")
```

People who are familiar with the game industry can easily understand why each of these developers has made the most in certain genres. For example, Nintendo has the Mario franchise which is mostly made up of platformer games, their highest selling genre.

key factor of these is to compare them to the highest selling genres of the industry as a whole. While Ubisoft and Sony both have Action, the best selling genre, as their own highest selling genre, the top 3 do not. Nintendo has platformer, Electronic Arts has sports, and Activision has shooter. It seems that some publishers are able to break the mold and make an enormous amount of money by being known for certain IPs.

However, while it may work for them, they have set a high standard by being the best at the genre they specialize in. Publishers may want to play it safe by sticking to the genres that make the most money overall rather than trying to mimick the success of those who are far bigger than them.

What if we looked at the Publishers' Most-Produced Genres? To be clear, this is visualizing how many publishers have that genre as their most-produced genre.
```{r}
ggplot(genre_counter, aes(x = reorder(Genre, -count), y = count, fill = Genre)) +
  geom_bar(stat = "identity") + 
  geom_text(aes(label = count), stat = "identity", vjust = -.5, color = "black") +
  scale_y_continuous(limits = c(0, 150)) +
  theme(plot.title = element_text(hjust = 0.5), 
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  labs(x = "Genre", 
       y = "Number of Publishers", 
       title = "Publishers' Most-Produced Genres") +
  scale_fill_manual(values = colorscale, guide = "none")
```

This is very similar to our previous graph on the Most Popular Genres. However, the third Publisher's favorite is Simulation. This is curious as Simulation is hardly that high in the Most Popular Genres. If there are not many games being produced or selling in that genre, this is likely due to a large amount of indie developers who have Simulation as their only genre that they have developed.

Now let's look into the consoles/platforms.

This is a Heat Map of our Most Supported Genre on Each Console. This shows how many games of that genre are being developed on each platform.
```{r}
ggplot(consoles_by_genres, aes(x = Console, y = Genre, fill = Genre.Amount)) +
  geom_tile() +
  theme(panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  scale_fill_gradient2(low = "white", mid = "green", high = "darkgreen", midpoint = 250) +
  labs(x = "Consoles", 
       y = "Genres", 
       fill = "Genres", 
       title = "Heatmap of Most Supported Genre on Each Console")
```

The darker that an area is, the more games have been developed for that console. Similarly to our previous graphs, Action is clearly the most developed overall as it has the darkest line on our heat map. Playstation 2 also has the most developed games in many genres such as Adventure and Sports. It is interesting that so many games would be developed for earlier consoles and for that number to not carry over into the newer ones in that genre.

Now let's look at how many are sold by each of our biggest publishers on eac platform.
```{r}
console_by_publisher_sales <- master %>% 
  group_by(Console, Publisher.Simple) %>% .[, c("Console", "Publisher.Simple", "Total.Sales")] %>%
  drop_na() %>% 
  filter(Publisher.Simple %in% c("Nintendo", "Electronic Arts", "Activision Blizzard", "Sony", "Ubisoft", "Bandai Namco", "THQ", "Sega", "Square Enix", "Konami", "Microsoft", "Capcom", "Rockstar Games", "Warner Bros", "2K Games")) %>% # Top 15 publishers
  filter(Console %in% c("PC", "XB", "PS2", "DS", "3DS", "Wii", "NS", "PS3", "PS4", "PS5", "X360", "XOne", "XS", "PSP", "WiiU", "And", "Mobile")) %>%
  summarize("Sum.Sales" = sum(Total.Sales), .groups = "drop") %>% ungroup() %>% complete(Console, Publisher.Simple, fill = list(Sum.Sales = 0)) %>% 
  replace_na(list(Sum.Sales = 0))

ggplot(console_by_publisher_sales, aes(x = Console, y = Publisher.Simple, fill = Sum.Sales)) +
  geom_tile() +
  theme(panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  scale_fill_gradient2(low = "white", mid = "magenta", high = "purple", midpoint = 225, na.value = "white") +
  labs(x = "Console", 
       y = "Publisher", 
       fill = "Total Sales", 
       title = "Heatmap of Best-Performing Console Releases by Publisher")
```

As to be expected, companies like Nintendo who create new consoles will mainly release games on their own consoles. This helps increase the demand for that console. The same works for Sony on Playstation and Microsoft on Xbox. Curiously, Electronic Arts also produces almost just as many as Sony and Xbox on their own platforms. This is because EA is a multiplatform developer and is not restricted to any specific one. This may be a big reason why they are the second biggest game company in sales.

Now let's look at how many sales each of the publishers gets on each platform.
```{r}
consoles_by_publisher <- master %>%
  group_by(Console, Publisher.Simple) %>%
  filter(Console %in% c("PC", "XB", "PS2", "DS", "3DS", "Wii", "NS", "PS3", "PS4", "PS5", "X360", "XOne", "XS", "PSP", "WiiU", "And", "Mobile")) %>%
  filter(Publisher.Simple %in% c("Nintendo", "Electronic Arts", "Activision Blizzard", "Sony", "Ubisoft", "Bandai Namco", "THQ", "Sega", "Square Enix", "Konami", "Microsoft", "Capcom", "Rockstar Games", "Warner Bros", "2K Games")) %>% # Top 15 publishers
  summarize(Releases = n()) %>%
  arrange(desc(Releases)) %>%
  ungroup() %>%
  complete(Console, Publisher.Simple, fill = list(Releases = 0)) %>% 
  replace_na(list(Releases = 0))

ggplot(consoles_by_publisher, aes(x = Console, y = Publisher.Simple, fill = Releases)) +
  geom_tile() +
  theme(panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  scale_fill_gradient2(low = "white", mid = "orange", high = "red", midpoint = 250) + 
  labs(x = "Consoles", 
       y = "Publishers", 
       fill = "Game Releases", 
       title = "Heatmap of Most Supported Consoles by Each Publisher")
```

Once again, we see similar sales by Nintendo, Sony, and Misocrosft with their first part exclusives. Electronic Arts and Activision Blizzard and Ubisoft seem to be dominating the PC platform. Unfortunately, we do not have as much data on the PS5 and Xbox Series X as they are newer consoles and VGChartz hasn't gathered enough yet.

Let's look into specific publishers and how their console releases affect their sales. We'll start with Nintendo.
```{r}
pub_performances_consoles_plot("Nintendo")
pub_supported_consoles_plot("Nintendo")
```

Nintendo only releases games on consoles that they already own. A major standout is that Nintendo has not released that many games on the Nintendo Switch and yet, the Switch has their highest game sales ever. This is the perfect situation to be in as they do not have to put in as much effort into their Switch releases and yet still make a large amount of money from sales. Unfortunately, the WiiU was a commercial failure and thus they did not release or sell many gmaes on that platform.

Let's look into Microsoft.
```{r}
pub_performances_consoles_plot("Microsoft")
pub_supported_consoles_plot("Microsoft")
```

This is a less ideal situation than Nintendo. Microsoft releases around the same amount of games for their generations of consoles, outside of the Xbox One. However, they still have not been able to compete with their Xbox 360 sales. This is extremely concerning because they are not making nearly as much as they used to during the 360 era. Microsoft has been releasing more games on PC than they used to as they have become less exclusive. However, those sales are also meager compared to the releases. They need to look into what their model was during the 360 era if they want to be able to reach those heights again. Something had changed for the worse according to this data.

Let's look into Sony.
```{r}
pub_performances_consoles_plot("Sony")
pub_supported_consoles_plot("Sony")
```

Sony is also in an interesting situation. Fortunately, it seems closer to Nintendo's situation. They are making around the same amount of sales on games for each console, but they are making less and less releases with each generation. If they wanted to make even more profit, it seems that the value of their individual releases has gone up so they could possibly make even more if they released more games. This all depends on if the effort is worth the value.

What about multiplatform publishers? Let's look into Ubisoft.
```{r}
pub_performances_consoles_plot("Ubisoft")
pub_supported_consoles_plot("Ubisoft")
```

Making games on multiple platforms means that Ubisoft is not restricted to any one line of platforms. They seemed to release most of their games on PC and DS, but make the most during the Wii, 360, and PS3 era. Interestingly, if you ignore the DS and PC part of their releases, their releases mirror their sales. The question arises about why they are not making as many games as they used to during the previous era. It seems less like an issue of the quality of their games currently and more that they have not released as many games as they used to. Another detail is that their least developed platform is the Nintendo Switch out of the most recent consoles. As we saw with Nintendo's sales, the Switch performs very well at selling. Ubisoft could continue their streak of selling less games than they used to, but just making more ports to the Nintendo Switch.

## Limitations 

There are a few limitations that we need to mention about our dataset and the overall scope of this project.

#### Outdated Data

It is very possible that some of the data used in this project may be outdated or a poor representation of the market. Most sales data on video games are not public information, and are only released by the publishers themselves in press releases and investor meetings. Additionally, companies are often more hesitant to release sales statistics for poorly performing games compared to those that are breakout hits. As a result, some games may not have sales data that is up to date entirely.

Additionally, this only covers the firsthand video game sales market. Games for older systems are not being produced officially anymore. For example, games for the Nintendo DS are not in production anymore, and any purchases for video games for these systems now are all part of a secondhand aftermarket for video games. Therefore, buying a Nintendo DS game in 2023 would not affect these sales numbers, while games for systems such as the Playstation 5 or Nintendo Switch could be getting new sales in the primary market every day. This is simply a limitation of the market data as a whole and using VGChartz for our data source.

#### Newly Released Systems

Sales data for systems like the Playstation 5 and Xbox Series X are very sparse at this point in time. These consoles are fairly new in terms of release, and therefore are still getting new sales all the time. As a result, these companies have not reported that sales data as much as older systems. It is possible that these systems are just too new for solid, statistically significant data to be collected on them at this point in time.

#### Genres on VGChartz

All of our genre data comes from VGChartz themselves, but sometimes video game genre can be subjective. All claims about genre in this project come from how VGChartz chooses to label genres and sort games. There is no personal influence on that from us whatsoever. We do remove `Misc` as a genre from most of our genre-related calculations, however, just because of how broad of a category it is.

Some games can be defined by multiple genres or try to subvert genres as a whole. Perhaps in a future project or with a smaller dataset, genre can be better represented for more specific niches. However, we do believe that the genres used in this project are descriptive enough for our intentions and analysis. It is important that we disclose this due to the subjective nature of genre in all mediums of entertainment, not only video games.

#### Games as Sales Units

The data in this project only represent video games as individual sales units. This does not account for games with microtransactions, the download rates of free-to-play or free-to-start games, or the nature of DLC (downloadable content) expansions for already existing games. Again, this is a limitation of using VGChartz' database for our analysis rather than anything to do with our own tidying or messing with the data.

Because the video game market has skewed toward free-to-play games in recent years, it is possible that some of the statistics for newer or more modern consoles may be less of an accurate representation of the market trends compared to older game sales. One such example could be Fortnite, or other live-service games, which make most of their money from microtransactions and virtual currency sales. This leads Fortnite's publisher, Epic Games, to appear much lower in our rankings compared to how much money the company actually brings in. However, this is simply outside the scope of what we set out to analyze in our project. 

## Conclusions

![Best Selling Genres](plots/genre_v_publisher/highest_selling_genre.png)

Overall, the video game market currently seems to favor more fast-paced and bombastic experiences compared to slower and more methodical ones. Games that fall into genres such as Action, Adventure, Shooter, and Sports tend to both sell many more copies and as a result have more games produced. This is in direct contrast to slower paced experiences such as Visual Novels, Sandbox, and virtual Board Games. It is possible that fans of the video game industry simply gravitate towards those experiences more, or that similar experiences to Visual Novels and Virtual Board games can be found elsewhere, such as in literary novels and physical board games, respectively. 

As for the individual video game publishing companies, more sales and releases seem to be made in general when these companies open up to being multi-platform publishers, meaning the release on multiple console brands (Playstation, Xbox, Nintendo). However, for companies that know their own market, such as Nintendo, they can still see extreme successes sticking to just one console market. Sticking to console exclusivity does make the company more prone to risks and failures however, as can be seen with how much Nintendo struggled on the Wii U. This is in direct contrast to someone like Ubisoft whose Wii U games may have also failed, but they were able to easily make money in other console brand markets due to their multi-platform releases.

When a video game publisher is able to identify their strengths and core audiences, such as by releasing genres they know are popular among fans, they are able to hit a market "sweet spot," so to speak, where they can make more money and put less effort into developing games. This can be seen in both Nintendo's success with the Nintendo Switch (NS) and Sony's ability to put less effort into releasing for subsequent Playstation models while still making similar market returns in terms of sales. In both of these examples, we see companies thriving not only in a single console market as first-party developers, but also identifying their strengths and riding out their successes as a result. Microsoft, on the other hand, is putting similar efforts as past successes but retrieving less financial returns on those investments. Our unprofessional recommendation to them would be to focus more on which genres they were releasing during the Xbox 360 eras in order to return to similar market successes.


## Future Work

For future work, we would most definitely recommend analyzing other approaches to video game sales data by looking at microtransactions and live-service games, as it is clear that the market has been favoring those experiences recently. This is the biggest missing piece from our dataset, and it would be incredibly interesting to see how the sales for companies that focus here compare to those like Nintendo who focus mainly on releasing games as individual units. Live-service games, mobile games, and games that focus on releasing downloadable content expansions are all only briefly touched on in our dataset, if at all. Combining our data with other ways to obtain data about these new fields would certainly be ideal.

The short time span available to work on this project before the end of our semester has certainly impacted our ability to flesh out our analysis as much as we would have liked. Other interesting approaches using this same data available here would be to focus more on average trends per genre, identifying and specifying individual console generations and their successes, and using the data for release date that we had included but not gotten to analyze. The limits of working with this dataset go far beyond what we were able to accomplish here, but we are certainly pleased with what we could produce in our given time span. 

We absolutely urge any future researchers interested in this topic to continue our work. All of our analysis for this project was compiled in a public [GitHub repository](https://github.com/adamhaertter/Data-Science-Final). This includes our master dataset in .csv format, as well as the Python scraper we built to scrape data off of VGChartz. New games are always being released, and the market is as active as ever in 2023, so subsequent analyses of this same data will always change as new data becomes available and more games release. If interested, expanding upon the work we were able to produce here is always welcome and encouraged.
